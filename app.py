from flask import Flask, render_template, request, redirect, url_for, send_file, flash
import os
from scanners.headers import check_missing_headers
from scanners.xss import check_xss
from scanners.sql_injection import check_sql_injection
from web_crawler import gather_urls
from scanners.report_generator import generate_pdf_report
import validators

app = Flask(__name__)

# Configuration
app.config['UPLOAD_FOLDER'] = 'reports'
app.config['SECRET_KEY'] = 'lololol' 

# Ensure the upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

@app.route('/', methods=['GET', 'POST'])
def home():
    return render_template('home.html')

scan_results = {} 

@app.route('/scan', methods=['POST'])
def scan():
    global scan_results
    url = request.form['url']
    scan_type = request.form.getlist('scan_type')
    scan_method = request.form['scan_method']

    if not validators.url(url):
        flash('Invalid URL provided. Please try again.', 'danger')
        return redirect(url_for('home'))

    scan_results = {}

    try:
        if scan_method == 'single':
            urls_to_scan = [url]
        elif scan_method == 'crawl':
            urls_to_scan = gather_urls(url)
        else:
            urls_to_scan = []

        for url_to_scan in urls_to_scan:
            if 'headers' in scan_type or 'all' in scan_type:
                scan_results[url_to_scan] = scan_results.get(url_to_scan, {})
                scan_results[url_to_scan]['headers'] = check_missing_headers(url_to_scan)

            if 'xss' in scan_type or 'all' in scan_type:
                scan_results[url_to_scan] = scan_results.get(url_to_scan, {})
                scan_results[url_to_scan]['xss'] = check_xss(url_to_scan)

            if 'sql_injection' in scan_type or 'all' in scan_type:
                scan_results[url_to_scan] = scan_results.get(url_to_scan, {})
                scan_results[url_to_scan]['sql_injection'] = check_sql_injection(url_to_scan)

        return render_template('results.html', results=scan_results)

    except Exception as e:
        flash(f"An error occurred during the scan: {str(e)}", 'danger')
        return redirect(url_for('home'))

@app.route('/download_report')
def download_report():
    global scan_results
    output_path = os.path.join(app.config['UPLOAD_FOLDER'], "scan_report.pdf")
    try:
        generate_pdf_report(scan_results, output_path)
        return send_file(output_path, as_attachment=True)
    except Exception as e:
        flash(f"An error occurred while generating the report: {str(e)}", 'danger')
        return redirect(url_for('home'))

if __name__ == '__main__':
    app.run(debug=True)
